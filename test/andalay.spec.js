describe('Andalay:', function(){
	var $httpBackend, $q, Andalay, OutcomeModel, OutcomeCollection;

	beforeEach(angular.mock.module('Andalay'));

	beforeEach(inject(function(_$httpBackend_,_$q_,_Andalay_){
		$httpBackend = _$httpBackend_;
		$q = _$q_;
		Andalay = _Andalay_;

		OutcomeModel = Andalay.Model.extend({
		    defaults:{
		    	label:'NO LABEL',
		        notes:'',
		        data:{},
		        definition:{},
		        another:'hi'
		    },
		    getName: function(){
		        return this.id + ' ' + this.label;
		    }
		});
		OutcomeCollection = Andalay.Collection.extend({
		    model:OutcomeModel
		});

	}));

	afterEach(function(){
		// $httpBackend.verifyNoOutstandingExpectation();
		// $httpBackend.verifyNoOutstandingRequest();
	});

	/*****************************************************************************
	* CONFIGURATION
	*****************************************************************************/

	describe('Creating Andalay',function(){
		it('should be injectable',inject(function(Andalay){
			expect(Andalay).toBeDefined();
		}));
		it('should have a valid Andalay.Collection object',inject(function(Andalay){
			expect(Andalay.Collection).toBeDefined();
			expect(angular.isFunction(Andalay.Collection.extend)).toBeTruthy();
		}));
		it('should have a valid Andalay.Model model object',inject(function(Andalay){
			expect(Andalay.Model).toBeDefined();
			expect(angular.isFunction(Andalay.Model.extend)).toBeTruthy();
		}));
	});

	// test that we can reset a collection
	describe('Test Andalay collection',function(){

		it('should be defined', function(){
			outcome = new OutcomeCollection();
			expect(outcome).toBeDefined();
			expect(outcome.models).toBeEmptyArray();
		})

		it('models should be empty', function(){
			expect(outcome.models).toBeEmptyArray();
		})

		it('should contain an array of models', function(){
			outcome.reset(resetData());
			expect(outcome.models).toBeArrayOfObjects();
			expect(outcome.models.length).toEqual(8);
			expect(outcome.models[0]).toHaveMethod('getName');
		});

		it('should have overriden default properties', function(){
			// the model with id 0 has no label attribute defined,
			// so it should be populated by the default label attribute in the defaults property
			expect(outcome.get(0).getName()).toEqual('0 NO LABEL');
			expect(outcome.get('nocontact').getName()).toEqual('nocontact No Contact');
		})

		it('should be possible to get models by id', function(){
			// It should be possible to get models from the collection by:
			expect(outcome.get('nocontact').label).toEqual('No Contact');
			expect(outcome.get({id:'nocontact'}).label).toEqual('No Contact');
		})
		it('should be possible to get models by autogenerated cid', function(){
			// It should be possible to get models from the collection by:
			var nocontact = outcome.models[1];
			expect(outcome.get(nocontact.cid).label).toEqual('No Contact');
			expect(outcome.get({cid:nocontact.cid,other:'random'}).label).toEqual('No Contact');
		})
		
		// Functions to test:

		// collection.add
		it('should add a model', function(){
			var toadd = {label:'newly added'};
			var array = outcome.add(toadd);
			var model = array[0];
			expect(array).toBeArray();
			expect(model.label).toEqual('newly added');
			expect(outcome.get(model).id).toBeUndefined();
			expect(model.getName()).toEqual('undefined newly added');
			expect(outcome.length).toEqual(9);
			expect(outcome.models.length).toEqual(9);
			expect(outcome.get(model).cid).toEqual('c9');
		})

		// collection.add
		it('should add a model', function(){
			expect(function(){outcome.add()}).toThrow(new Error('Cannot add undefined, must be an object or an array of objects'));
		})
		
		// collection.addOne
		it('should add one model', function(){
			var toadd = {label:'last added'};
			var model = outcome.addOne(toadd);
			expect(model.label).toEqual('last added');
			expect(outcome.get(model).id).toBeUndefined();
			expect(model.getName()).toEqual('undefined last added');
			expect(outcome.length).toEqual(10);
			expect(outcome.models.length).toEqual(10);
			expect(outcome.get(model).cid).toEqual('c10');
		})

		// todo: collection.addOne specify the options {at:3}

		// collection.update
		it('should update a models attributes', function(){
			var moved = outcome.get('movedhouse');
			var returnedModel = outcome.update({id:'movedhouse', label:'Moved House Indeed!'});
			expect(outcome.get('movedhouse').label).toEqual('Moved House Indeed!');
			expect(returnedModel.label).toEqual('Moved House Indeed!');
			expect(moved.label).toEqual('Moved House Indeed!');
		})

		// collection.remove
		it('should remove a model', function(){
			var removed = outcome.remove({id:'movedhouse'});
			expect(outcome.length).toEqual(9);
			var checkNotFound = outcome.get('movedhouse');
			expect(checkNotFound).toBeUndefined();
			expect(removed).toBeObject();
			expect(removed.id).toEqual('movedhouse');
			expect(removed.getName()).toEqual('movedhouse Moved House Indeed!');
		})

        // modelId

        // last
        it('should return the last model in the collection', function(){
        	var last = outcome.last();
        	expect(last.getName()).toEqual('undefined last added');
        })

        // at
        it('should return a model at position specified', function(){
        	var one = outcome.at(1);
        	expect(one.id).toEqual('nocontact');
        })

        // size
        it('should return the collection size', function(){
        	var size = outcome.size();
        	expect(size).toEqual(9);
        })

        // all
        it('should return all models', function(){
        	var all = outcome.all();
        	expect(all).toBeArray();
        	expect(all.length).toEqual(9);
        })

        // toJSON

        // removeAll
        it('should remove all', function(){
        	outcome.removeAll();
        	expect(outcome.models).toBeEmptyArray();
        })
		
	});
	
	

});

function resetData(){
	return [
		{
			id: 0,
			parent: null,
			type: 'group',
			description: null,
			children: ['notcontact', 'callback', 'refusal']
		},
		{
			id: 'nocontact',
			parent: 0,
			type: 'group',
			label: 'No Contact',
			description: 'Heres the description for no contact group',
			children: ['deceased', 'movedhouse', 'businessnumber', 'faxnumber']
		},
		{
			id: 'deceased',
			parent: 'nocontact',
			type:'outcome',
			label: 'Deceased',
			description: 'Description goes here'
		},
		{
			id: 'movedhouse',
			parent: 'nocontact',
			type:'outcome',
			label: 'Moved House',
			description: 'Description goes here'
		},
		{
			id: 'businessnumber',
			parent: 'nocontact',
			type:'outcome',
			label: 'Business Number',
			description: 'Description goes here'
		},
		{
			id: 'faxnumber',
			parent: 'nocontact',
			type:'outcome',
			label: 'Fax Number',
			description: 'Description goes here'
		},
		{
			id: 'forms',
			parent: 0,
			type: 'outcome',
			label: 'Forms',
			description: 'Description goes here for forms'
		},
		{
			id: 'donation',
			parent: 0,
			type:'outcome',
			label: 'Donations',
			description: 'Description goes here for donations'
		}
	];
}